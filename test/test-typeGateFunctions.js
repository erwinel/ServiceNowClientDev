"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var JsTypeCommander_1 = require("../compiled/JsTypeCommander");
var TL = require("./testLib");
describe("Testing type gate functions", function () {
    var functionTypeGroups = [
        TL.functionTypeGroup('nil gate', TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.notDefined, 'notDefined', '(obj?: TDefined): obj is undefined', TL.expectEqualToTrue(TL.argSet(function () { return []; }, ""), TL.argSet(function () { return [undefined]; }, "undefined")), TL.expectEqualToFalse(TL.argSet(function () { return [null]; }, "null"))), TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isNull, 'isNull', '(obj?: TDefined): obj is undefined', TL.expectEqualToTrue(TL.argSet(function () { return [null]; }, "null")), TL.expectEqualToFalse(TL.argSet(function () { return []; }, ""), TL.argSet(function () { return [undefined]; }, "undefined"))), TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isNil, 'isNil', '(obj?: TDefined): obj is undefined', TL.expectEqualToTrue(TL.argSet(function () { return []; }, ""), TL.argSet(function () { return [undefined]; }, "undefined"), TL.argSet(function () { return [null]; }, "null"))), TL.expectEqualToFalse(TL.argSet(function () { return [NaN]; }, 'NaN'), TL.argSet(function () { return [0]; }, '0'), TL.argSet(function () { return [false]; }, 'false'), TL.argSet(function () { return [""]; }, '""'), TL.argSet(function () { return [{}]; }, '{}'), TL.argSet(function () { return [[]]; }, '[]'))),
        TL.functionTypeGroup('string gate', TL.functionGroup('Testing type gate functions for any string', TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isString, 'isString', '(obj?: TDefined): obj is string'), TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isStringIfDef, 'isStringIfDef', '(obj?: TDefined): obj is string | undefined'), TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isStringOrNull, 'isStringOrNull', '(obj?: TDefined): obj is string | null'), TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isStringOrNil, 'isStringOrNil', '(obj?: TDefined): obj is string | null | undefined'), TL.expectEqualToTrue(TL.argSet(function () { return [" "]; }, '" "'), TL.argSet(function () { return [" \n\r "]; }, '" \\n\\r "'), TL.argSet(function () { return ["Test"]; }, '"Test"'), TL.argSet(function () { return [" Test "]; }, '" Test "'))), TL.functionGroup('Testing empty string type gate functions', TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isEmptyString, 'isEmptyString', '(obj?: TDefined): obj is string', TL.expectEqualToFalse(TL.argSet(function () { return []; }, ""), TL.argSet(function () { return [undefined]; }, "undefined"), TL.argSet(function () { return [null]; }, "null"))), TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isEmptyStringIfDef, 'isEmptyStringIfDef', '(obj?: TDefined): obj is string | undefined', TL.expectEqualToTrue(TL.argSet(function () { return []; }, ""), TL.argSet(function () { return [undefined]; }, "undefined")), TL.expectEqualToFalse(TL.argSet(function () { return [null]; }, "null"))), TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isEmptyStringOrNull, 'isEmptyStringOrNull', '(obj?: TDefined): obj is string | null', TL.expectEqualToTrue(TL.argSet(function () { return [null]; }, "null")), TL.expectEqualToFalse(TL.argSet(function () { return []; }, ""), TL.argSet(function () { return [undefined]; }, "undefined"))), TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isEmptyStringOrNil, 'isEmptyStringOrNil', '(obj?: TDefined): obj is string | null | undefined', TL.expectEqualToTrue(TL.argSet(function () { return []; }, ""), TL.argSet(function () { return [undefined]; }, "undefined"), TL.argSet(function () { return [null]; }, "null"))), TL.expectEqualToFalse(TL.argSet(function () { return [" "]; }, '" "'), TL.argSet(function () { return [" \n\r "]; }, '" \\n\\r "'), TL.argSet(function () { return ["Test"]; }, '"Test"'), TL.argSet(function () { return [" Test "]; }, '" Test "'))), TL.functionGroup('Testing whitespace string type gate functions', TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isEmptyOrWhitespace, 'isEmptyOrWhitespace', '(obj?: TDefined): obj is string'), TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isEmptyOrWhitespaceIfDef, 'isEmptyOrWhitespaceIfDef', '(obj?: TDefined): obj is string | undefined'), TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isNullOrWhitespace, 'isNullOrWhitespace', '(obj?: TDefined): obj is string | null'), TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isNilOrWhitespace, 'isNilOrWhitespace', '(obj?: TDefined): obj is string | null | undefined'), TL.expectEqualToTrue(TL.argSet(function () { return [" "]; }, '" "'), TL.argSet(function () { return [" \n\r "]; }, '" \\n\\r "')), TL.expectEqualToFalse(TL.argSet(function () { return ["Test"]; }, '"Test"'), TL.argSet(function () { return [" Test "]; }, '" Test "'))), TL.expectEqualToTrue(TL.argSet(function () { return [""]; }, '""')), TL.expectEqualToFalse(TL.argSet(function () { return [NaN]; }, 'NaN'), TL.argSet(function () { return [0]; }, '0'), TL.argSet(function () { return [false]; }, 'false'), TL.argSet(function () { return [[]]; }, '[]'), TL.argSet(function () { return [[""]]; }, '[""]'), TL.argSet(function () { return [{}]; }, '{}'), TL.argSet(function () { return [function () { return ""; }]; }, 'function() { return ""; }'))),
        TL.functionTypeGroup('boolean gate', TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isBoolean, 'isBoolean', '(obj?: TDefined): obj is boolean', TL.expectEqualToFalse(TL.argSet(function () { return []; }, ""), TL.argSet(function () { return [undefined]; }, "undefined"), TL.argSet(function () { return [null]; }, "null"))), TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isBooleanIfDef, 'isBooleanIfDef', '(obj?: TDefined): obj is boolean | undefined', TL.expectEqualToTrue(TL.argSet(function () { return []; }, ""), TL.argSet(function () { return [undefined]; }, "undefined")), TL.expectEqualToFalse(TL.argSet(function () { return [null]; }, "null"))), TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isBooleanOrNull, 'isBooleanOrNull', '(obj?: TDefined): obj is boolean | null', TL.expectEqualToTrue(TL.argSet(function () { return [null]; }, "null")), TL.expectEqualToFalse(TL.argSet(function () { return []; }, ""), TL.argSet(function () { return [undefined]; }, "undefined"))), TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isBooleanOrNil, 'isBooleanOrNil', '(obj?: TDefined): obj is boolean | null | undefined', TL.expectEqualToTrue(TL.argSet(function () { return []; }, ""), TL.argSet(function () { return [undefined]; }, "undefined"), TL.argSet(function () { return [null]; }, "null"))), TL.expectEqualToTrue(TL.argSet(function () { return [true]; }, 'true'), TL.argSet(function () { return [false]; }, 'false')), TL.expectEqualToFalse(TL.argSet(function () { return [NaN]; }, 'NaN'), TL.argSet(function () { return [1]; }, '1'), TL.argSet(function () { return [0]; }, '0'), TL.argSet(function () { return [""]; }, '""'), TL.argSet(function () { return ["true"]; }, '"true"'), TL.argSet(function () { return ["false"]; }, '"false"'), TL.argSet(function () { return [[]]; }, '[]'), TL.argSet(function () { return [[true]]; }, '[true]'), TL.argSet(function () { return [{}]; }, '{}'), TL.argSet(function () { return [Symbol.iterator]; }, 'Symbol.iterator'), TL.argSet(function () { return [function () { return true; }]; }, 'function() { return true; }'))),
        TL.functionTypeGroup('number gate', TL.expectationSet(TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isNumber, 'isNumber', '(obj?: TDefined): obj is number', TL.expectEqualToFalse(TL.argSet(function () { return []; }, ""), TL.argSet(function () { return [undefined]; }, "undefined"), TL.argSet(function () { return [null]; }, "null"), TL.argSet(function () { return [NaN]; }, "NaN"), TL.argSet(function () { return [Infinity]; }, "Infinity"), TL.argSet(function () { return [Number.NEGATIVE_INFINITY]; }, "Number.NEGATIVE_INFINITY"), TL.argSet(function () { return [Number.POSITIVE_INFINITY]; }, "Number.POSITIVE_INFINITY"))), TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isNumberIfDef, 'isNumberIfDef', '(obj?: TDefined): obj is number | undefined', TL.expectEqualToTrue(TL.argSet(function () { return []; }, ""), TL.argSet(function () { return [undefined]; }, "undefined")), TL.expectEqualToFalse(TL.argSet(function () { return [null]; }, "null"), TL.argSet(function () { return [NaN]; }, "NaN"), TL.argSet(function () { return [Infinity]; }, "Infinity"), TL.argSet(function () { return [Number.NEGATIVE_INFINITY]; }, "Number.NEGATIVE_INFINITY"), TL.argSet(function () { return [Number.POSITIVE_INFINITY]; }, "Number.POSITIVE_INFINITY"))), TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isNumberOrNull, 'isNumberOrNull', '(obj?: TDefined): obj is number | null', TL.expectEqualToTrue(TL.argSet(function () { return [null]; }, "null")), TL.expectEqualToFalse(TL.argSet(function () { return []; }, ""), TL.argSet(function () { return [undefined]; }, "undefined"), TL.argSet(function () { return [NaN]; }, "NaN"), TL.argSet(function () { return [Infinity]; }, "Infinity"), TL.argSet(function () { return [Number.NEGATIVE_INFINITY]; }, "Number.NEGATIVE_INFINITY"), TL.argSet(function () { return [Number.POSITIVE_INFINITY]; }, "Number.POSITIVE_INFINITY"))), TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isNumberOrNil, 'isNumberOrNil', '(obj?: TDefined): obj is number | null | undefined', TL.expectEqualToTrue(TL.argSet(function () { return []; }, ""), TL.argSet(function () { return [undefined]; }, "undefined"), TL.argSet(function () { return [null]; }, "null"), TL.argSet(function () { return [Infinity]; }, "Infinity"), TL.argSet(function () { return [Number.NEGATIVE_INFINITY]; }, "Number.NEGATIVE_INFINITY"), TL.argSet(function () { return [Number.POSITIVE_INFINITY]; }, "Number.POSITIVE_INFINITY"), TL.argSet(function () { return [NaN]; }, "NaN"))), TL.expectEqualToTrue(TL.argSet(function () { return [1]; }, '1'), TL.argSet(function () { return [0]; }, '0'), TL.argSet(function () { return [0.0001]; }, '0.0001'), TL.argSet(function () { return [-1]; }, '-1'))), TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isNumberNaNorNull, 'isNumberNaNorNull', '(obj?: TDefined): obj is number | null', TL.expectEqualToTrue(TL.argSet(function () { return [null]; }, "null"), TL.argSet(function () { return [NaN]; }, "NaN"), TL.argSet(function () { return [1]; }, '1'), TL.argSet(function () { return [0]; }, '0'), TL.argSet(function () { return [0.0001]; }, '0.0001'), TL.argSet(function () { return [-1]; }, '-1'), TL.argSet(function () { return [Infinity]; }, "Infinity"), TL.argSet(function () { return [Number.NEGATIVE_INFINITY]; }, "Number.NEGATIVE_INFINITY"), TL.argSet(function () { return [Number.POSITIVE_INFINITY]; }, "Number.POSITIVE_INFINITY")), TL.expectEqualToFalse(TL.argSet(function () { return []; }, ""), TL.argSet(function () { return [undefined]; }, "undefined"))), TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isInfinite, 'isInfinite', '(obj?: TDefined): obj is number', TL.expectEqualToTrue(TL.argSet(function () { return [Infinity]; }, "Infinity"), TL.argSet(function () { return [Number.NEGATIVE_INFINITY]; }, "Number.NEGATIVE_INFINITY"), TL.argSet(function () { return [Number.POSITIVE_INFINITY]; }, "Number.POSITIVE_INFINITY")), TL.expectEqualToFalse(TL.argSet(function () { return []; }, ""), TL.argSet(function () { return [undefined]; }, "undefined"), TL.argSet(function () { return [null]; }, "null"), TL.argSet(function () { return [NaN]; }, "NaN"), TL.argSet(function () { return [1]; }, '1'), TL.argSet(function () { return [0]; }, '0'), TL.argSet(function () { return [0.0001]; }, '0.0001'), TL.argSet(function () { return [-1]; }, '-1'))), TL.expectEqualToFalse(TL.argSet(function () { return [true]; }, 'true'), TL.argSet(function () { return [false]; }, 'false'), TL.argSet(function () { return [""]; }, '""'), TL.argSet(function () { return ["1"]; }, '"1"'), TL.argSet(function () { return ["0"]; }, '"0"'), TL.argSet(function () { return [[]]; }, '[]'), TL.argSet(function () { return [[1]]; }, '[1]'), TL.argSet(function () { return [[0]]; }, '[0]'), TL.argSet(function () { return [{}]; }, '{}'), TL.argSet(function () { return [Symbol.iterator]; }, 'Symbol.iterator'), TL.argSet(function () { return [function () { return true; }]; }, 'function() { return true; }'), TL.argSet(function () { return [function () { return true; }]; }, 'function() { return NaN; }'))),
        TL.functionTypeGroup('function gate', TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isFunction, 'isFunction', '(obj?: TDefined): obj is Function', TL.expectEqualToFalse(TL.argSet(function () { return []; }, ""), TL.argSet(function () { return [undefined]; }, "undefined"), TL.argSet(function () { return [null]; }, "null"))), TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isFunctionIfDef, 'isFunctionIfDef', '(obj?: TDefined): obj is Function | undefined', TL.expectEqualToTrue(TL.argSet(function () { return []; }, ""), TL.argSet(function () { return [undefined]; }, "undefined")), TL.expectEqualToFalse(TL.argSet(function () { return [null]; }, "null"))), TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isFunctionOrNull, 'isFunctionOrNull', '(obj?: TDefined): obj is Function | null', TL.expectEqualToTrue(TL.argSet(function () { return [null]; }, "null")), TL.expectEqualToFalse(TL.argSet(function () { return []; }, ""), TL.argSet(function () { return [undefined]; }, "undefined"))), TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isFunctionOrNil, 'isFunctionOrNil', '(obj?: TDefined): obj is Function | null | undefined', TL.expectEqualToTrue(TL.argSet(function () { return []; }, ""), TL.argSet(function () { return [undefined]; }, "undefined"), TL.argSet(function () { return [null]; }, "null"))), TL.expectEqualToTrue(TL.argSet(function () { return [function () { return true; }]; }, 'function() { return true; }')), TL.expectEqualToFalse(TL.argSet(function () { return [NaN]; }, 'NaN'), TL.argSet(function () { return [1]; }, '1'), TL.argSet(function () { return [true]; }, 'true'), TL.argSet(function () { return [""]; }, '""'), TL.argSet(function () { return [[]]; }, '[]'), TL.argSet(function () { return [[function () { return true; }]]; }, '[function() { return true; }]'), TL.argSet(function () { return [{}]; }, '{}'), TL.argSet(function () { return [Symbol.iterator]; }, 'Symbol.iterator'))),
        TL.functionTypeGroup('object gate', TL.functionGroup('Testing simple object type gate functions for object type', TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isObjectType, 'isObjectType', '(obj?: TDefined): obj is object', TL.expectEqualToFalse(TL.argSet(function () { return []; }, ""), TL.argSet(function () { return [undefined]; }, "undefined"), TL.argSet(function () { return [null]; }, "null"))), TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isObjectTypeIfDef, 'isObjectTypeIfDef', '(obj?: TDefined): obj is object | undefined', TL.expectEqualToTrue(TL.argSet(function () { return []; }, ""), TL.argSet(function () { return [undefined]; }, "undefined")), TL.expectEqualToFalse(TL.argSet(function () { return [null]; }, "null"))), TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isObjectTypeOrNull, 'isObjectTypeOrNull', '(obj?: TDefined): obj is object | null', TL.expectEqualToTrue(TL.argSet(function () { return [null]; }, "null")), TL.expectEqualToFalse(TL.argSet(function () { return []; }, ""), TL.argSet(function () { return [undefined]; }, "undefined"))), TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isObjectTypeOrNil, 'isObjectTypeOrNil', '(obj?: TDefined): obj is object | null | undefined', TL.expectEqualToTrue(TL.argSet(function () { return []; }, ""), TL.argSet(function () { return [undefined]; }, "undefined"), TL.argSet(function () { return [null]; }, "null")))), TL.functionGroup('Testing any object type gate functions for objects which can have any named property', TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isObject, 'isObject', '(obj?: TDefined): obj is IStringKeyedObject', TL.expectEqualToFalse(TL.argSet(function () { return []; }, ""), TL.argSet(function () { return [undefined]; }, "undefined"), TL.argSet(function () { return [null]; }, "null"))), TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isObjectIfDef, 'isObjectIfDef', '(obj?: TDefined): obj is IStringKeyedObject | undefined', TL.expectEqualToTrue(TL.argSet(function () { return []; }, ""), TL.argSet(function () { return [undefined]; }, "undefined")), TL.expectEqualToFalse(TL.argSet(function () { return [null]; }, "null"))), TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isObjectOrNull, 'isObjectOrNull', '(obj?: TDefined): obj is IStringKeyedObject | null', TL.expectEqualToTrue(TL.argSet(function () { return [null]; }, "null")), TL.expectEqualToFalse(TL.argSet(function () { return []; }, ""), TL.argSet(function () { return [undefined]; }, "undefined"))), TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isObjectOrNil, 'isObjectOrNil', '(obj?: TDefined): obj is IStringKeyedObject | null | undefined', TL.expectEqualToTrue(TL.argSet(function () { return []; }, ""), TL.argSet(function () { return [undefined]; }, "undefined"), TL.argSet(function () { return [null]; }, "null")))), TL.functionGroup('Testing type gate functions for non-array objects', TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isNonArrayObject, 'isNonArrayObject', '(obj?: TDefined): obj is IStringKeyedObject', TL.expectEqualToFalse(TL.argSet(function () { return []; }, ""), TL.argSet(function () { return [undefined]; }, "undefined"), TL.argSet(function () { return [null]; }, "null"))), TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isNonArrayObjectIfDef, 'isNonArrayObjectIfDef', '(obj?: TDefined): obj is IStringKeyedObject | undefined', TL.expectEqualToTrue(TL.argSet(function () { return []; }, ""), TL.argSet(function () { return [undefined]; }, "undefined")), TL.expectEqualToFalse(TL.argSet(function () { return [null]; }, "null"))), TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isNonArrayObjectOrNull, 'isNonArrayObjectOrNull', '(obj?: TDefined): obj is IStringKeyedObject | null', TL.expectEqualToTrue(TL.argSet(function () { return [null]; }, "null")), TL.expectEqualToFalse(TL.argSet(function () { return []; }, ""), TL.argSet(function () { return [undefined]; }, "undefined"))), TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isNonArrayObjectOrNil, 'isNonArrayObjectOrNil', '(obj?: TDefined): obj is IStringKeyedObject | null | undefined', TL.expectEqualToTrue(TL.argSet(function () { return []; }, ""), TL.argSet(function () { return [undefined]; }, "undefined"), TL.argSet(function () { return [null]; }, "null")))), TL.functionGroup('Testing type gate functions for plain objects', TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isPlainObject, 'isPlainObject', '(obj?: TDefined): obj is IStringKeyedObject', TL.expectEqualToFalse(TL.argSet(function () { return []; }, ""), TL.argSet(function () { return [undefined]; }, "undefined"), TL.argSet(function () { return [null]; }, "null"))), TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isPlainObjectIfDef, 'isPlainObjectIfDef', '(obj?: TDefined): obj is IStringKeyedObject | undefined', TL.expectEqualToTrue(TL.argSet(function () { return []; }, ""), TL.argSet(function () { return [undefined]; }, "undefined")), TL.expectEqualToFalse(TL.argSet(function () { return [null]; }, "null"))), TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isPlainObjectOrNull, 'isPlainObjectOrNull', '(obj?: TDefined): obj is IStringKeyedObject | null', TL.expectEqualToTrue(TL.argSet(function () { return [null]; }, "null")), TL.expectEqualToFalse(TL.argSet(function () { return []; }, ""), TL.argSet(function () { return [undefined]; }, "undefined"))), TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isPlainObjectOrNil, 'isPlainObjectOrNil', '(obj?: TDefined): obj is IStringKeyedObject | null | undefined', TL.expectEqualToTrue(TL.argSet(function () { return []; }, ""), TL.argSet(function () { return [undefined]; }, "undefined"), TL.argSet(function () { return [null]; }, "null"))))),
        TL.functionTypeGroup('Array gate', TL.functionGroup('Testing normal array type gate functions', TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isArray, 'isObjectType', '(obj?: TDefined): obj is AnyNilable[]', TL.expectEqualToFalse(TL.argSet(function () { return []; }, ""), TL.argSet(function () { return [undefined]; }, "undefined"), TL.argSet(function () { return [null]; }, "null"))), TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isArrayIfDef, 'isArrayIfDef', '(obj?: TDefined): obj is AnyNilable[] | undefined', TL.expectEqualToTrue(TL.argSet(function () { return []; }, ""), TL.argSet(function () { return [undefined]; }, "undefined")), TL.expectEqualToFalse(TL.argSet(function () { return [null]; }, "null"))), TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isArrayOrNull, 'isArrayOrNull', '(obj?: TDefined): obj is AnyNilable[] | null', TL.expectEqualToTrue(TL.argSet(function () { return [null]; }, "null")), TL.expectEqualToFalse(TL.argSet(function () { return []; }, ""), TL.argSet(function () { return [undefined]; }, "undefined"))), TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isArrayOrNil, 'isArrayOrNil', '(obj?: TDefined): obj is AnyNilable[] | null | undefined', TL.expectEqualToTrue(TL.argSet(function () { return []; }, ""), TL.argSet(function () { return [undefined]; }, "undefined"), TL.argSet(function () { return [null]; }, "null")))), TL.functionGroup('Testing normal array type gate functions', TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isArray, 'isArray', '(obj?: TDefined): obj is AnyNilable[]', TL.expectEqualToFalse(TL.argSet(function () { return []; }, ""), TL.argSet(function () { return [undefined]; }, "undefined"), TL.argSet(function () { return [null]; }, "null"))), TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isArrayIfDef, 'isArrayIfDef', '(obj?: TDefined): obj is AnyNilable[] | undefined', TL.expectEqualToTrue(TL.argSet(function () { return []; }, ""), TL.argSet(function () { return [undefined]; }, "undefined")), TL.expectEqualToFalse(TL.argSet(function () { return [null]; }, "null"))), TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isArrayOrNull, 'isArrayOrNull', '(obj?: TDefined): obj is AnyNilable[] | null', TL.expectEqualToTrue(TL.argSet(function () { return [null]; }, "null")), TL.expectEqualToFalse(TL.argSet(function () { return []; }, ""), TL.argSet(function () { return [undefined]; }, "undefined"))), TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isArrayOrNil, 'isArrayOrNil', '(obj?: TDefined): obj is AnyNilable[] | null | undefined', TL.expectEqualToTrue(TL.argSet(function () { return []; }, ""), TL.argSet(function () { return [undefined]; }, "undefined"), TL.argSet(function () { return [null]; }, "null")))), TL.functionGroup('Testing empty array type gate functions', TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isEmptyArray, 'isEmptyArray', '(obj?: TDefined): obj is AnyNilable[]', TL.expectEqualToFalse(TL.argSet(function () { return []; }, ""), TL.argSet(function () { return [undefined]; }, "undefined"), TL.argSet(function () { return [null]; }, "null"))), TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isEmptyArray, 'isEmptyArray', '(obj: TDefined, checkElements: boolean): obj is AnyNilable[]', TL.expectEqualToFalse(TL.argSet(function () { return [undefined]; }, "undefined"), TL.argSet(function () { return [null]; }, "null"))), TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isEmptyArrayIfDef, 'isEmptyArrayIfDef', '(obj?: TDefined): obj is AnyNilable[] | undefined', TL.expectEqualToTrue(TL.argSet(function () { return []; }, ""), TL.argSet(function () { return [undefined]; }, "undefined")), TL.expectEqualToFalse(TL.argSet(function () { return [null]; }, "null"))), TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isEmptyArrayIfDef, 'isEmptyArrayIfDef', '(obj: TDefined, checkElements: boolean): obj is AnyNilable[] | undefined', TL.expectEqualToTrue(TL.argSet(function () { return [undefined]; }, "undefined")), TL.expectEqualToFalse(TL.argSet(function () { return [null]; }, "null"))), TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isEmptyArrayOrNull, 'isEmptyArrayOrNull', '(obj?: TDefined): obj is AnyNilable[] | null', TL.expectEqualToTrue(TL.argSet(function () { return [null]; }, "null")), TL.expectEqualToFalse(TL.argSet(function () { return []; }, ""), TL.argSet(function () { return [undefined]; }, "undefined"))), TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isEmptyArrayOrNull, 'isEmptyArrayOrNull', '(obj: TDefined, checkElements: boolean): obj is AnyNilable[] | null', TL.expectEqualToTrue(TL.argSet(function () { return [null]; }, "null")), TL.expectEqualToFalse(TL.argSet(function () { return [undefined]; }, "undefined"))), TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isEmptyArrayOrNil, 'isEmptyArrayOrNil', '(obj?: TDefined): obj is AnyNilable[] | null | undefined', TL.expectEqualToTrue(TL.argSet(function () { return []; }, ""), TL.argSet(function () { return [undefined]; }, "undefined"), TL.argSet(function () { return [null]; }, "null"))), TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isEmptyArrayOrNil, 'isEmptyArrayOrNil', '(obj: TDefined, checkElements: boolean): obj is AnyNilable[] | null | undefined', TL.expectEqualToTrue(TL.argSet(function () { return [undefined]; }, "undefined"), TL.argSet(function () { return [null]; }, "null")))), TL.functionGroup('Testing ArrayLike type gate functions', TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isArrayLike, 'isArrayLike', '(obj?: TDefined): obj is ArrayLike<AnyNilable>', TL.expectEqualToFalse(TL.argSet(function () { return []; }, ""), TL.argSet(function () { return [undefined]; }, "undefined"), TL.argSet(function () { return [null]; }, "null"))), TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isArrayLike, 'isArrayLike', '(obj: TDefined, checkElements: boolean): obj is ArrayLike<AnyNilable>', TL.expectEqualToFalse(TL.argSet(function () { return [undefined]; }, "undefined"), TL.argSet(function () { return [null]; }, "null"))), TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isArrayLikeIfDef, 'isArrayLikeIfDef', '(obj?: TDefined): obj is ArrayLike<AnyNilable> | undefined', TL.expectEqualToTrue(TL.argSet(function () { return []; }, ""), TL.argSet(function () { return [undefined]; }, "undefined")), TL.expectEqualToFalse(TL.argSet(function () { return [null]; }, "null"))), TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isArrayLikeIfDef, 'isArrayLikeIfDef', '(obj: TDefined, checkElements: boolean): obj is ArrayLike<AnyNilable> | undefined', TL.expectEqualToTrue(TL.argSet(function () { return [undefined]; }, "undefined")), TL.expectEqualToFalse(TL.argSet(function () { return [null]; }, "null"))), TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isArrayLikeOrNull, 'isArrayLikeOrNull', '(obj?: TDefined): obj is ArrayLike<AnyNilable> | null', TL.expectEqualToTrue(TL.argSet(function () { return [null]; }, "null")), TL.expectEqualToFalse(TL.argSet(function () { return []; }, ""), TL.argSet(function () { return [undefined]; }, "undefined"))), TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isArrayLikeOrNull, 'isArrayLikeOrNull', '(obj: TDefined, checkElements: boolean): obj is ArrayLike<AnyNilable> | null', TL.expectEqualToTrue(TL.argSet(function () { return [null]; }, "null")), TL.expectEqualToFalse(TL.argSet(function () { return [undefined]; }, "undefined"))), TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isArrayLikeOrNil, 'isArrayLikeOrNil', '(obj?: TDefined): obj is ArrayLike<AnyNilable> | null | undefined', TL.expectEqualToTrue(TL.argSet(function () { return []; }, ""), TL.argSet(function () { return [undefined]; }, "undefined"), TL.argSet(function () { return [null]; }, "null"))), TL.expectEqualToFalse(TL.argSet(function () { return []; }, ""), TL.argSet(function () { return [undefined]; }, "undefined")), TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isArrayLikeOrNil, 'isArrayLikeOrNil', '(obj: TDefined, checkElements: boolean): obj is ArrayLike<AnyNilable> | null | undefined', TL.expectEqualToTrue(TL.argSet(function () { return [undefined]; }, "undefined"), TL.argSet(function () { return [null]; }, "null"))))),
        TL.functionTypeGroup('derrivation gate', TL.genericFunctionGroup('Testing Error class derrivation functions', function () { return [Error]; }, TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.derivesFrom, 'derivesFrom<Error>', '(obj?: TDefined, Error): obj is Error', TL.expectEqualToFalse(TL.argSet(function () { return [undefined]; }, "undefined"), TL.argSet(function () { return [null]; }, "null"))), TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.derivesFromIfDef, 'derivesFromIfDef<Error>', '(obj?: TDefined, Error): obj is Error | undefined', TL.expectEqualToTrue(TL.argSet(function () { return [undefined]; }, "undefined")), TL.expectEqualToFalse(TL.argSet(function () { return [null]; }, "null"))), TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.derivesFromOrNull, 'derivesFromOrNull<Error>', '(obj?: TDefined, Error): obj is Error | null', TL.expectEqualToTrue(TL.argSet(function () { return [null]; }, "null")), TL.expectEqualToFalse(TL.argSet(function () { return [undefined]; }, "undefined"))), TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.derivesFromOrNil, 'derivesFromOrNil<Error>', '(obj?: TDefined, Error): obj is Error | null | undefined', TL.expectEqualToTrue(TL.argSet(function () { return [undefined]; }, "undefined"), TL.argSet(function () { return [null]; }, "null"))), TL.expectEqualToTrue(TL.argSet(function () { return [new Error()]; }, 'new Error()'), TL.argSet(function () { return [new RangeError()]; }, 'new RangeError()')), TL.expectEqualToFalse(TL.argSet(function () { return [new TL.TestErrorLike()]; }, 'new TestErrorLike()'), TL.argSet(function () { return [NaN]; }, 'NaN'), TL.argSet(function () { return [1]; }, '1'), TL.argSet(function () { return [true]; }, 'true'), TL.argSet(function () { return [[]]; }, '[]'), TL.argSet(function () { return [[new Error()]]; }, '[new Error()]'))), TL.genericFunctionGroup('Testing Error class derrivation functions', function () { return [RangeError]; }, TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.derivesFrom, 'derivesFrom<RangeError>', '(obj?: TDefined, RangeError): obj is RangeError', TL.expectEqualToFalse(TL.argSet(function () { return [undefined]; }, "undefined"), TL.argSet(function () { return [null]; }, "null"))), TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.derivesFromIfDef, 'derivesFromIfDef<RangeError>', '(obj?: TDefined, RangeError): obj is RangeError | undefined', TL.expectEqualToTrue(TL.argSet(function () { return [undefined]; }, "undefined")), TL.expectEqualToFalse(TL.argSet(function () { return [null]; }, "null"))), TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.derivesFromOrNull, 'derivesFromOrNull<RangeError>', '(obj?: TDefined, RangeError): obj is RangeError | null', TL.expectEqualToTrue(TL.argSet(function () { return [null]; }, "null")), TL.expectEqualToFalse(TL.argSet(function () { return [undefined]; }, "undefined"))), TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.derivesFromOrNil, 'derivesFromOrNil<RangeError>', '(obj?: TDefined, RangeError): obj is RangeError | null | undefined', TL.expectEqualToTrue(TL.argSet(function () { return [undefined]; }, "undefined"), TL.argSet(function () { return [null]; }, "null"))), TL.expectEqualToTrue(TL.argSet(function () { return [new RangeError()]; }, 'new RangeError()')), TL.expectEqualToFalse(TL.argSet(function () { return [new Error()]; }, 'new Error()'), TL.argSet(function () { return [new TL.TestErrorLike()]; }, 'new TestErrorLike()'), TL.argSet(function () { return [NaN]; }, 'NaN'), TL.argSet(function () { return [1]; }, '1'), TL.argSet(function () { return [true]; }, 'true'), TL.argSet(function () { return [[]]; }, '[]'), TL.argSet(function () { return [[new RangeError()]]; }, '[new RangeError()]'))), TL.genericFunctionGroup('Testing custom class derrivation functions', function () { return [TL.TestErrorLike]; }, TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.derivesFrom, 'derivesFrom<TestErrorLike>', '(obj?: TDefined, TestErrorLike): obj is TestErrorLike', TL.expectEqualToFalse(TL.argSet(function () { return [undefined]; }, "undefined"), TL.argSet(function () { return [null]; }, "null"))), TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.derivesFromIfDef, 'derivesFromIfDef<TestErrorLike>', '(obj?: TDefined, TestErrorLike): obj is TestErrorLike | undefined', TL.expectEqualToTrue(TL.argSet(function () { return [undefined]; }, "undefined")), TL.expectEqualToFalse(TL.argSet(function () { return [null]; }, "null"))), TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.derivesFromOrNull, 'derivesFromOrNull<TestErrorLike>', '(obj?: TDefined, TestErrorLike): obj is TestErrorLike | null', TL.expectEqualToTrue(TL.argSet(function () { return [null]; }, "null")), TL.expectEqualToFalse(TL.argSet(function () { return [undefined]; }, "undefined"))), TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.derivesFromOrNil, 'derivesFromOrNil<TestErrorLike>', '(obj?: TDefined, TestErrorLike): obj is TestErrorLike | null | undefined', TL.expectEqualToTrue(TL.argSet(function () { return [undefined]; }, "undefined"), TL.argSet(function () { return [null]; }, "null"))), TL.expectEqualToTrue(TL.argSet(function () { return [new TL.TestErrorLike()]; }, 'new TestErrorLike()'), TL.argSet(function () { return [new TL.TestErrorLike2()]; }, 'new TestErrorLike2()'), TL.argSet(function () { return [new TL.TestErrorLike3()]; }, 'new TestErrorLike3()')), TL.expectEqualToFalse(TL.argSet(function () { return [new RangeError()]; }, 'new RangeError()'), TL.argSet(function () { return [new Error()]; }, 'new Error()'), TL.argSet(function () { return [new TL.TestErrorLike()]; }, 'new TestErrorLike()'), TL.argSet(function () { return [NaN]; }, 'NaN'), TL.argSet(function () { return [1]; }, '1'), TL.argSet(function () { return [true]; }, 'true'), TL.argSet(function () { return [[]]; }, '[]'), TL.argSet(function () { return [[new RangeError()]]; }, '[new RangeError()]')))),
        TL.functionTypeGroup('ErrorLike gate', TL.testFunction(JsTypeCommander_1.x_44813_util.JsTypeCommander.isErrorLike, 'isErrorLike', '(obj?: TDefined): obj is boolean', TL.expectEqualToTrue(TL.argSet(function () { return [new RangeError()]; }, 'new RangeError()'), TL.argSet(function () { return [new Error()]; }, 'new Error()'), TL.argSet(function () { return [new TL.TestErrorLike()]; }, 'new TestErrorLike()'), TL.argSet(function () { return [new TL.TestErrorLike2()]; }, 'new TestErrorLike2()')), TL.expectEqualToFalse(TL.argSet(function () { return [NaN]; }, 'NaN'), TL.argSet(function () { return [1]; }, '1'), TL.argSet(function () { return [0]; }, '0'), TL.argSet(function () { return [""]; }, '""'), TL.argSet(function () { return ["true"]; }, '"true"'), TL.argSet(function () { return ["false"]; }, '"false"'), TL.argSet(function () { return [[]]; }, '[]'), TL.argSet(function () { return [[true]]; }, '[true]'), TL.argSet(function () { return [{}]; }, '{}'), TL.argSet(function () { return [Symbol.iterator]; }, 'Symbol.iterator'), TL.argSet(function () { return [function () { return true; }]; }, 'function() { return true; }'))))
    ];
    TL.describeFunctionTypeGroups(functionTypeGroups);
});
